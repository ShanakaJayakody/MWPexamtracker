<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>UCAT Exam Results Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" integrity="sha512-9usAa10IRO0HhonpyAIVpjrylPvoDwiPUiKdWk5t3PyolY1cOd4DSE0Ga+ri4AuTroPR5aQvXU9xC6qOPnzFeg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <style>
        /* Styles remain the same */
        body { font-family: 'Inter', sans-serif; background-color: #f3f4f6; }
        .chart-container { position: relative; height: 300px; width: 100%; }
        .dashboard-card { background-color: white; border-radius: 0.75rem; padding: 1.5rem; box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1); margin-bottom: 1.5rem; }
        .raw-score-input { width: 60px; padding: 0.25rem 0.5rem; border: 1px solid #d1d5db; border-radius: 0.375rem; text-align: center; }
        .date-input, .text-input { padding: 0.25rem 0.5rem; border: 1px solid #d1d5db; border-radius: 0.375rem; }
        .text-input { min-width: 150px; }
        td, th { padding: 0.75rem 1rem; white-space: nowrap; text-align: left; font-size: 0.875rem; vertical-align: middle; }
        th { background-color: #f9fafb; font-weight: 500; color: #6b7280; text-transform: uppercase; letter-spacing: 0.05em; }
        tbody tr:hover { background-color: #f9fafb; }
        .remove-btn { background-color: transparent; border: none; color: #ef4444; cursor: pointer; padding: 0.25rem 0.5rem; border-radius: 0.375rem; transition: background-color 0.15s ease-in-out, color 0.15s ease-in-out; }
        .remove-btn:hover { background-color: #fee2e2; color: #dc2626; }
        .remove-btn i { pointer-events: none; }
    </style>
</head>
<body class="p-4 md:p-8">

    <div class="max-w-7xl mx-auto">

        <div class="flex justify-center mb-6">
            <img
                src="https://media-hosting.imagekit.io/2069d58cc8a34f6d/MWP%20Color%20no%20background.png?Expires=1839560338&Key-Pair-Id=K2ZIVPTIP2VGHC&Signature=xLbgCBhORdSqrxr5gAsf783Na8g-Cco4aMlK1ZkeliDDl5ONmI4iCeUg-MM~bbjr5psfZu6cIxoPvKEK5PWso900V2unSHup~YdQoXFTIxxTtlmnCjQuXvMzlrq~SUi1AWtY8L41gmRFCFwq1Cc-pGFrjeb6eudcEsgCIjGjSokHmNEKLwvCXNzAcQyhRkbqccXTAJNUF8nozXJOWy6l0XnLrYju~9Nn2kV~bYIfRlvy4VxRpgPSdCvKA4UTV~jkBW5DYXlnsX219b0npPyqHQDFZvIBzTjLToDhzuLYPD7yPAwjAlYfTcdfymc~54q6D-RkGt-YZvnLb8TJrBb18A__"
                alt="MWP Logo"
                class="h-16 w-auto"
                 onerror="this.onerror=null; this.src='https://placehold.co/200x64/e2e8f0/64748b?text=Logo+Error'; this.classList.add('p-2');"
                 >
        </div>

        <h1 class="text-3xl font-bold text-gray-800 mb-6 text-center">UCAT Exam Results Dashboard</h1>

        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
             <div class="dashboard-card">
                <h2 class="text-lg font-semibold text-gray-600 mb-2">Verbal Reasoning (VR)</h2>
                <div class="flex justify-between items-baseline">
                    <div> <p class="text-sm text-gray-500">Average</p> <p id="avg-vr" class="text-3xl font-bold text-blue-600">---</p> </div>
                    <div class="text-right"> <p class="text-sm text-gray-500">Latest</p> <p id="latest-vr" class="text-3xl font-bold text-blue-600">---</p> </div>
                </div>
            </div>
            <div class="dashboard-card">
                <h2 class="text-lg font-semibold text-gray-600 mb-2">Decision Making (DM)</h2>
                 <div class="flex justify-between items-baseline">
                    <div> <p class="text-sm text-gray-500">Average</p> <p id="avg-dm" class="text-3xl font-bold text-green-600">---</p> </div>
                    <div class="text-right"> <p class="text-sm text-gray-500">Latest</p> <p id="latest-dm" class="text-3xl font-bold text-green-600">---</p> </div>
                </div>
            </div>
            <div class="dashboard-card">
                <h2 class="text-lg font-semibold text-gray-600 mb-2">Quantitative Reasoning (QR)</h2>
                 <div class="flex justify-between items-baseline">
                    <div> <p class="text-sm text-gray-500">Average</p> <p id="avg-qr" class="text-3xl font-bold text-red-600">---</p> </div>
                    <div class="text-right"> <p class="text-sm text-gray-500">Latest</p> <p id="latest-qr" class="text-3xl font-bold text-red-600">---</p> </div>
                </div>
            </div>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
             <div class="dashboard-card">
                <h2 class="text-xl font-semibold text-gray-700 mb-4">Scaled Score Trend Over Time</h2>
                <div class="chart-container"> <canvas id="scoreTrendChart"></canvas> </div>
            </div>
            <div class="dashboard-card">
                <h2 class="text-xl font-semibold text-gray-700 mb-4">Latest Scaled Exam Scores</h2>
                <div class="chart-container"> <canvas id="latestScoreChart"></canvas> </div>
            </div>
        </div>

        <div class="dashboard-card overflow-x-auto">
            <h2 class="text-xl font-semibold text-gray-700 mb-4">Detailed Results</h2>
            <p class="text-sm text-gray-600 mb-4">Enter exam details and raw marks below. Scaled scores (300-900) will be calculated automatically.</p>
            <table class="min-w-full divide-y divide-gray-200">
                <thead>
                    <tr>
                        <th>Date</th> <th>Exam Name</th> <th>Raw VR</th> <th>Scaled VR</th>
                        <th>Raw DM</th> <th>Scaled DM</th> <th>Raw QR</th> <th>Scaled QR</th>
                        <th>Total Scaled Score</th> <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="results-table-body" class="bg-white divide-y divide-gray-200">
                    <tr> <td colspan="10" class="px-6 py-4 text-sm text-gray-500 text-center">Loading data...</td> </tr>
                </tbody>
            </table>
             <div class="mt-4 text-right">
                 <button id="add-row-btn" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded transition duration-150 ease-in-out">
                     Add New Exam Result
                 </button>
            </div>
        </div>

    </div>

    <script>
        // --- Sample Data ---
        let examResults = [
            { date: '2024-11-15', examName: "Official Mock A", rawVr: 25, vr: 0, rawDm: 26, dm: 0, rawQr: 28, qr: 0 },
            { date: '2025-01-10', examName: "Medify Mock 1", rawVr: 27, vr: 0, rawDm: 28, dm: 0, rawQr: 30, qr: 0 },
            { date: '2025-02-28', examName: "Medify Mock 2", rawVr: 29, vr: 0, rawDm: 30, dm: 0, rawQr: 31, qr: 0 },
            { date: '2025-03-20', examName: "Official Mock B", rawVr: 31, vr: 0, rawDm: 29, dm: 0, rawQr: 33, qr: 0 },
            { date: '2025-04-25', examName: "Medify Mock 3", rawVr: 30, vr: 0, rawDm: 31, dm: 0, rawQr: 34, qr: 0 },
        ];

        // --- Chart Instances ---
        let scoreTrendChartInstance = null;
        let latestScoreChartInstance = null;

        // --- Conversion Functions (Unchanged - Assume correct) ---
        function convertVR(rawMark) { /* ... */ const score = parseInt(rawMark, 10); if (isNaN(score) || score < 0) return 0; if (score <= 5) return 300; if (score <= 7) return 350; if (score === 8) return 370; if (score <= 10) return 400; if (score <= 12) return 430; if (score <= 14) return 450; if (score === 15) return 470; if (score === 16) return 500; if (score <= 18) return 510; if (score === 19) return 530; if (score === 20) return 540; if (score === 21) return 550; if (score === 22) return 560; if (score === 23) return 570; if (score === 24) return 600; if (score === 25) return 620; if (score === 26) return 630; if (score === 27) return 640; if (score === 28) return 650; if (score === 29) return 660; if (score === 30) return 670; if (score === 31) return 680; if (score === 32) return 700; if (score === 33) return 730; if (score === 34) return 750; if (score === 35) return 770; if (score === 36) return 790; if (score === 37) return 800; if (score === 38) return 820; if (score === 39) return 840; if (score === 40) return 850; if (score === 41) return 870; if (score === 42) return 880; if (score === 43) return 890; if (score >= 44) return 900; return 300; }
        function convertDM(rawMark) { /* ... */ const score = parseInt(rawMark, 10); if (isNaN(score) || score < 0) return 0; if (score <= 5) return 300; if (score <= 7) return 350; if (score <= 9) return 370; if (score <= 11) return 400; if (score <= 13) return 430; if (score === 14) return 450; if (score === 15) return 470; if (score === 16) return 500; if (score === 17) return 510; if (score === 18) return 530; if (score === 19) return 540; if (score === 20) return 550; if (score === 21) return 560; if (score === 22) return 570; if (score === 23) return 600; if (score === 24) return 620; if (score === 25) return 630; if (score === 26) return 640; if (score === 27) return 650; if (score === 28) return 660; if (score <= 30) return 670; if (score <= 32) return 680; if (score <= 33) return 700; if (score <= 35) return 730; if (score <= 36) return 750; if (score <= 38) return 770; if (score === 39) return 790; if (score === 40) return 800; if (score === 41) return 820; if (score === 42) return 840; if (score === 43) return 850; if (score === 44) return 870; if (score === 45) return 880; if (score === 46) return 890; if (score >= 47) return 900; return 300; }
        function convertQR(rawMark) { /* ... */ const score = parseInt(rawMark, 10); if (isNaN(score) || score < 0) return 0; if (score <= 3) return 300; if (score <= 6) return 350; if (score === 7) return 370; if (score === 8) return 400; if (score === 9) return 430; if (score === 10) return 450; if (score === 11) return 470; if (score === 12) return 500; if (score === 13) return 510; if (score === 14) return 530; if (score === 15) return 540; if (score === 16) return 550; if (score === 17) return 560; if (score === 18) return 570; if (score === 19) return 600; if (score === 20) return 620; if (score === 21) return 630; if (score === 22) return 650; if (score === 23) return 670; if (score === 24) return 700; if (score === 25) return 730; if (score === 26) return 750; if (score === 27) return 770; if (score === 28) return 790; if (score === 29) return 800; if (score === 30) return 820; if (score === 31) return 830; if (score === 32) return 850; if (score === 33) return 870; if (score === 34) return 880; if (score >= 35) return 900; return 300; }

        // --- Helper Functions ---
        function calculateAverage(scores) { /* ... */ if (!scores || scores.length === 0) return 0; const validScores = scores.filter(score => score !== null && score !== undefined && !isNaN(score) && score > 0); if (validScores.length === 0) return 0; const sum = validScores.reduce((acc, score) => acc + score, 0); return Math.round(sum / validScores.length); }

        // --- Update Dashboard ---
        function updateDashboard() { /* ... */ populateSummaryCards(); renderScoreTrendChart(); renderLatestScoreChart(); }

        // --- Populate Dashboard Components ---
        document.addEventListener('DOMContentLoaded', () => {
            console.log("DOM fully loaded and parsed"); // Debug log
            const tableBody = document.getElementById('results-table-body'); // Get table body once
            if (!tableBody) { console.error("Could not find table body element!"); return; }

            // Load data
            const savedData = localStorage.getItem('ucatExamResults');
            if (savedData) {
                try { examResults = JSON.parse(savedData); if (!Array.isArray(examResults)) { examResults = []; } console.log("Loaded data from localStorage:", examResults); }
                catch (e) { console.error("Error parsing saved data:", e); examResults = []; }
            } else { console.log("No saved data found in localStorage."); }

            // Populate table initially
            populateResultsTable();
            // Initial chart/card rendering
            updateDashboard();
            // Add listener for the "Add Row" button
            document.getElementById('add-row-btn').addEventListener('click', addNewExamRow);

            // --- Event delegation setup ---
            console.log("Adding event listeners to table body:", tableBody); // Debug log
            tableBody.addEventListener('click', (event) => {
                console.log("Click detected inside table body. Target:", event.target); // Debug log
                const removeButton = event.target.closest('.remove-btn');
                if (removeButton) {
                    console.log("Remove button (.remove-btn) identified."); // Debug log
                    handleRemoveRow(removeButton); // Pass the button element
                } else { console.log("Clicked element was not the remove button or its child."); }
            });
             tableBody.addEventListener('input', (event) => {
                 if (event.target.tagName === 'INPUT' && event.target.type !== 'date') {
                     console.log("Input event detected. Target:", event.target); // Debug log
                     handleInputChange(event.target);
                 }
             });
             tableBody.addEventListener('change', (event) => {
                 if (event.target.tagName === 'INPUT' && event.target.type === 'date') {
                      console.log("Change event detected for date input. Target:", event.target); // Debug log
                      handleInputChange(event.target);
                 }
             });
             console.log("Event listeners attached to table body."); // Debug log
        });

        // Save data to localStorage
        function saveData() { /* ... */ try { localStorage.setItem('ucatExamResults', JSON.stringify(examResults)); console.log("Data saved."); } catch (e) { console.error("Error saving data to localStorage:", e); } }

        // Populate Summary Cards
        function populateSummaryCards() { /* ... (Code remains the same) ... */ if (!examResults || examResults.length === 0) { ['avg-vr', 'latest-vr', 'avg-dm', 'latest-dm', 'avg-qr', 'latest-qr'].forEach(id => { const el = document.getElementById(id); if (el) el.textContent = 'N/A'; }); return; } const vrScores = examResults.map(r => r.vr).filter(s => s > 0); const dmScores = examResults.map(r => r.dm).filter(s => s > 0); const qrScores = examResults.map(r => r.qr).filter(s => s > 0); const sortedResults = [...examResults].sort((a, b) => new Date(b.date) - new Date(a.date)); const latestResult = sortedResults[0]; document.getElementById('avg-vr').textContent = calculateAverage(vrScores) || 'N/A'; document.getElementById('avg-dm').textContent = calculateAverage(dmScores) || 'N/A'; document.getElementById('avg-qr').textContent = calculateAverage(qrScores) || 'N/A'; document.getElementById('latest-vr').textContent = latestResult && latestResult.vr > 0 ? latestResult.vr : 'N/A'; document.getElementById('latest-dm').textContent = latestResult && latestResult.dm > 0 ? latestResult.dm : 'N/A'; document.getElementById('latest-qr').textContent = latestResult && latestResult.qr > 0 ? latestResult.qr : 'N/A'; }

        // Populate Detailed Results Table
        function populateResultsTable() {
            console.log("populateResultsTable called"); // Debug log
            const tableBody = document.getElementById('results-table-body');
            if (!tableBody) { console.error("populateResultsTable: Cannot find table body!"); return; }

            const scrollPosition = window.scrollY;
            tableBody.innerHTML = ''; // Clear existing rows
            if (!examResults || examResults.length === 0) {
                console.log("populateResultsTable: No data to display."); // Debug log
                tableBody.innerHTML = `<tr><td colspan="10" class="text-center text-gray-500">No data available. Add a new exam result below.</td></tr>`;
                return;
            }

            const sortedResults = [...examResults].sort((a, b) => new Date(a.date) - new Date(b.date));
            console.log(`populateResultsTable: Rendering ${sortedResults.length} rows.`); // Debug log

            sortedResults.forEach((result) => {
                const originalIndex = examResults.findIndex(item => item === result);
                if (originalIndex === -1) { console.error("populateResultsTable: Could not find original index for item:", result); return; }

                result.vr = convertVR(result.rawVr); result.dm = convertDM(result.rawDm); result.qr = convertQR(result.rawQr);
                const totalScore = (result.vr || 0) + (result.dm || 0) + (result.qr || 0);

                const row = document.createElement('tr');
                row.setAttribute('data-index', originalIndex); // Set original index

                row.innerHTML = `
                    <td><input type="date" class="date-input" value="${result.date || ''}" data-field="date"></td>
                    <td><input type="text" class="text-input exam-name-input" value="${result.examName || ''}" placeholder="e.g., Medify Mock 1" data-field="examName"></td>
                    <td><input type="number" class="raw-score-input vr-raw" value="${result.rawVr !== null && result.rawVr !== undefined ? result.rawVr : ''}" data-field="rawVr" min="0"></td>
                    <td class="scaled-vr">${result.vr || '---'}</td>
                    <td><input type="number" class="raw-score-input dm-raw" value="${result.rawDm !== null && result.rawDm !== undefined ? result.rawDm : ''}" data-field="rawDm" min="0"></td>
                    <td class="scaled-dm">${result.dm || '---'}</td>
                    <td><input type="number" class="raw-score-input qr-raw" value="${result.rawQr !== null && result.rawQr !== undefined ? result.rawQr : ''}" data-field="rawQr" min="0"></td>
                    <td class="scaled-qr">${result.qr || '---'}</td>
                    <td class="font-semibold text-gray-800 total-scaled">${totalScore > 0 ? totalScore : '---'}</td>
                    <td> <button class="remove-btn" title="Remove Row"> <i class="fas fa-trash-alt"></i> </button> </td>
                `;
                tableBody.appendChild(row);
            });
             console.log("populateResultsTable finished rendering rows."); // Debug log

             requestAnimationFrame(() => { window.scrollTo(0, scrollPosition); });
        }


        // Handler for input changes (triggered by delegation)
        function handleInputChange(inputElement) { /* ... (Code remains the same) ... */ const row = inputElement.closest('tr'); if (!row || !row.hasAttribute('data-index')) { console.error("Input Change: Could not find row or data-index."); return; } const index = parseInt(row.getAttribute('data-index'), 10); const field = inputElement.getAttribute('data-field'); let value = inputElement.value; if (index < 0 || index >= examResults.length) { console.error("Input Change: Invalid index", index); return; } const dataEntry = examResults[index]; if (!dataEntry) { console.error("Input Change: Data entry not found for index:", index); return; } console.log(`Input Change: Updating index ${index}, field ${field}, value ${value}`); if (field === 'rawVr' || field === 'rawDm' || field === 'rawQr') { dataEntry[field] = value === '' ? null : parseInt(value, 10); recalculateAndUpdateRow(row, dataEntry); } else { dataEntry[field] = value; } updateDashboard(); saveData(); }

        // Handler for remove button clicks (triggered by delegation)
        function handleRemoveRow(buttonElement) {
            console.log("handleRemoveRow called with button:", buttonElement); // Debug log
            const row = buttonElement.closest('tr');
            if (!row) { console.error("Remove Row: Could not find parent row (tr)."); return; }
            if (!row.hasAttribute('data-index')) { console.error("Remove Row: Row does not have data-index attribute."); return; }

            const indexString = row.getAttribute('data-index');
            const index = parseInt(indexString, 10);
            console.log(`Remove Row: Attempting to remove index ${index} (from string '${indexString}')`); // Debug log

            if (isNaN(index)) { console.error("Remove Row: Parsed index is NaN."); return; }

            if (index >= 0 && index < examResults.length) {
                // --- Bypassing confirm() for debugging ---
                console.log(`Remove Row: Splicing index ${index}. Current array length: ${examResults.length}`);
                console.log("Array before splice:", JSON.stringify(examResults));
                examResults.splice(index, 1); // Remove from array
                console.log(`Remove Row: Spliced. New array length: ${examResults.length}`);
                console.log("Array after splice:", JSON.stringify(examResults));

                console.log("Remove Row: Repopulating table...");
                populateResultsTable();    // Redraw table
                console.log("Remove Row: Updating dashboard...");
                updateDashboard();         // Update charts/cards
                console.log("Remove Row: Saving data...");
                saveData();                // Save changes
                console.log("Remove Row: Process complete.");
                // --- End of bypassed section ---
            } else {
                console.error(`Remove Row: Invalid index ${index} for removal. Array length: ${examResults.length}`);
                 populateResultsTable(); // Attempt to fix potential index mismatch
            }
        }


        // Helper function to recalculate scores and update a specific table row display
        function recalculateAndUpdateRow(rowElement, dataEntry) { /* ... (Code remains the same) ... */ const scaledVrEl = rowElement.querySelector('.scaled-vr'); const scaledDmEl = rowElement.querySelector('.scaled-dm'); const scaledQrEl = rowElement.querySelector('.scaled-qr'); const totalScaledEl = rowElement.querySelector('.total-scaled'); dataEntry.vr = convertVR(dataEntry.rawVr); dataEntry.dm = convertDM(dataEntry.rawDm); dataEntry.qr = convertQR(dataEntry.rawQr); const totalScore = (dataEntry.vr || 0) + (dataEntry.dm || 0) + (dataEntry.qr || 0); if (scaledVrEl) scaledVrEl.textContent = dataEntry.vr > 0 ? dataEntry.vr : '---'; if (scaledDmEl) scaledDmEl.textContent = dataEntry.dm > 0 ? dataEntry.dm : '---'; if (scaledQrEl) scaledQrEl.textContent = dataEntry.qr > 0 ? dataEntry.qr : '---'; if (totalScaledEl) totalScaledEl.textContent = totalScore > 0 ? totalScore : '---'; }

        // Function to add a new row for exam results
        function addNewExamRow() { /* ... (Code remains the same) ... */ const newDate = new Date().toISOString().split('T')[0]; const newEntry = { date: newDate, examName: "", rawVr: null, vr: 0, rawDm: null, dm: 0, rawQr: null, qr: 0 }; examResults.push(newEntry); populateResultsTable(); updateDashboard(); saveData(); }

        // Render Score Trend Chart (Line Chart) - Total line removed
        function renderScoreTrendChart() {
            console.log("renderScoreTrendChart called"); // Debug log
            const ctx = document.getElementById('scoreTrendChart').getContext('2d');
            if (scoreTrendChartInstance) { scoreTrendChartInstance.destroy(); scoreTrendChartInstance = null; }
            if (!examResults || examResults.length === 0) {
                 ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
                 ctx.textAlign = 'center'; ctx.fillStyle = '#6b7280';
                 ctx.fillText('No data available for trend chart.', ctx.canvas.width / 2, ctx.canvas.height / 2);
                 return;
            }
            const sortedResults = [...examResults].sort((a, b) => new Date(a.date) - new Date(b.date));
            const labels = sortedResults.map(r => `${r.date}${r.examName ? ` (${r.examName.substring(0,15)})` : ''}`);
            const vrData = sortedResults.map(r => r.vr > 0 ? r.vr : null);
            const dmData = sortedResults.map(r => r.dm > 0 ? r.dm : null);
            const qrData = sortedResults.map(r => r.qr > 0 ? r.qr : null);
            // *** FIX: Removed totalData calculation ***
            // const totalData = sortedResults.map(r => (r.vr || 0) + (r.dm || 0) + (r.qr || 0) > 0 ? (r.vr || 0) + (r.dm || 0) + (r.qr || 0) : null);

            const chartData = {
                labels: labels,
                datasets: [ // *** FIX: Removed the "Total" dataset object ***
                    { label: 'VR', data: vrData, borderColor: 'rgb(59, 130, 246)', tension: 0.1, fill: false, spanGaps: true },
                    { label: 'DM', data: dmData, borderColor: 'rgb(16, 185, 129)', tension: 0.1, fill: false, spanGaps: true },
                    { label: 'QR', data: qrData, borderColor: 'rgb(239, 68, 68)', tension: 0.1, fill: false, spanGaps: true }
                    // { label: 'Total', data: totalData, borderColor: 'rgb(107, 114, 128)', tension: 0.1, borderDash: [5, 5], fill: false, spanGaps: true }
                ]
             };
            const chartOptions = {
                responsive: true, maintainAspectRatio: false,
                scales: {
                    y: { beginAtZero: false, suggestedMin: 300, suggestedMax: 900 },
                    x: { ticks: { display: false }, grid: { display: false } }
                },
                plugins: { tooltip: { mode: 'index', intersect: false }, legend: { position: 'top' } },
                hover: { mode: 'nearest', intersect: true }
            };
            scoreTrendChartInstance = new Chart(ctx, { type: 'line', data: chartData, options: chartOptions });
            console.log("renderScoreTrendChart finished"); // Debug log
        }

        // Render Latest Score Comparison Chart (Bar Chart)
        function renderLatestScoreChart() { /* ... (Code remains the same) ... */ const ctx = document.getElementById('latestScoreChart').getContext('2d'); if (latestScoreChartInstance) { latestScoreChartInstance.destroy(); latestScoreChartInstance = null; } if (!examResults || examResults.length === 0) { ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height); ctx.textAlign = 'center'; ctx.fillStyle = '#6b7280'; ctx.fillText('No data available for latest score chart.', ctx.canvas.width / 2, ctx.canvas.height / 2); return; } const sortedResults = [...examResults].sort((a, b) => new Date(b.date) - new Date(a.date)); const latestResult = sortedResults[0]; const labels = ['Verbal Reasoning (VR)', 'Decision Making (DM)', 'Quantitative Reasoning (QR)']; const data = [ latestResult.vr > 0 ? latestResult.vr : 0, latestResult.dm > 0 ? latestResult.dm : 0, latestResult.qr > 0 ? latestResult.qr : 0 ]; const chartData = { labels: labels, datasets: [{ label: `Scaled Scores from ${latestResult.date} (${latestResult.examName || 'N/A'})`, data: data, backgroundColor: ['rgba(59, 130, 246, 0.7)', 'rgba(16, 185, 129, 0.7)', 'rgba(239, 68, 68, 0.7)'], borderColor: ['rgb(59, 130, 246)', 'rgb(16, 185, 129)', 'rgb(239, 68, 68)'], borderWidth: 1 }] }; const chartOptions = { responsive: true, maintainAspectRatio: false, scales: { y: { beginAtZero: false, suggestedMin: 300, suggestedMax: 900 } }, plugins: { legend: { display: true, position: 'top' } } }; latestScoreChartInstance = new Chart(ctx, { type: 'bar', data: chartData, options: chartOptions }); }

    </script>

</body>
</html>
